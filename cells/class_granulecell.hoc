begintemplate granulecell


//ndendN where N = # of dendrites
ndend1=4 //# segments for each dendrite
ndend2=4
gabapentin = 0.5
//define variables
public  pre_list, connect_pre, subsets, is_art, is_connected
public soma, gcdend1, gcdend2
public all, gcldend, pdend, mdend, ddend
public xx, yy, zz, position

create soma, gcdend1[ndend1], gcdend2[ndend2]
objref syn, pre_list, templist
external numCellTypes, cellType


proc init() {
	pre_list = new List()
	subsets()
	gctemp()
	synapse()
}
objref all, gcldend, pdend, mdend, ddend
proc subsets(){ local i
	objref all, gcldend, pdend, mdend, ddend
	all = new SectionList()
		soma all.append()
		for i=0, 3 gcdend1 [i] all.append()
		for i=0, 3 gcdend2 [i] all.append()

	gcldend  = new SectionList()
		gcdend1 [0] gcldend.append()
		gcdend2 [0] gcldend.append()

	pdend  = new SectionList()
		gcdend1 [1] pdend.append()
		gcdend2 [1] pdend.append()

	mdend  = new SectionList()
		gcdend1 [2] mdend.append()
		gcdend2 [2] mdend.append()

	ddend  = new SectionList()
		gcdend1 [3] ddend.append()
		gcdend2 [3] ddend.append()
}
proc gctemp() {

	soma {nseg=1 L=16.8 diam=16.8} // changed L & diam
		
	gcdend1 [0] {nseg=1 L=50 diam=3}
	for i = 1, 3	gcdend1 [i] {nseg=1 L=150 diam=3}

	gcdend2 [0] {nseg=1 L=50 diam=3}
	for i = 1, 3	gcdend2 [i] {nseg=1 L=150 diam=3}	 	

    
	forsec all {
		insert ccanl
	catau_ccanl = 10*(1-gabapentin)
	caiinf_ccanl = 5.e-6*(1-gabapentin)
	Ra=210
	}

	soma {insert ichan2  //ildikos ichan
	gnatbar_ichan2=0.12  //original 0.030 to .055 
	gkfbar_ichan2=0.016  //original 0.015
	gksbar_ichan2=0.006
		insert borgka
	gkabar_borgka=0.012*(1-gabapentin)
		insert nca  // HAV-N- Ca channel
	gncabar_nca=0.002*(1-gabapentin)  // check to modify- original 0.004
		insert lca 
	glcabar_lca=0.005*(1-gabapentin)
		insert cat
	gcatbar_cat=0.000037*(1-gabapentin)
		insert gskch
	gskbar_gskch=0.001
		insert cagk
	gkbar_cagk=0.0006
	gl_ichan2 = 0.00004
	cm=1

} 

		forsec gcldend {insert ichan2
	gnatbar_ichan2=0.018  //original 0.015
	gkfbar_ichan2=0.004
	gksbar_ichan2=0.006
		insert nca  // HAV-N- Ca channel
	gncabar_nca=0.003*(1-gabapentin)  // check to modify- original 0.004
		insert lca 
	glcabar_lca=0.0075*(1-gabapentin)
		insert cat
	gcatbar_cat=0.000075*(1-gabapentin)
		insert gskch
	gskbar_gskch=0.0004
		insert cagk
	gkbar_cagk=0.0006*(1-gabapentin)
	gl_ichan2 = 0.00004
	cm=1}
		
		forsec pdend {insert ichan2
	gnatbar_ichan2=0.013
	gkfbar_ichan2=0.004
	gksbar_ichan2=0.006
		insert nca  // HAV-N- Ca channel
	gncabar_nca=0.001*(1-gabapentin)  // check to modify- original 0.004
		insert lca 
	glcabar_lca=0.0075*(1-gabapentin)
		insert cat
	gcatbar_cat=0.00025*(1-gabapentin)
		insert gskch
	gskbar_gskch=0.0002
		insert cagk
	gkbar_cagk=0.001
	gl_ichan2 = 0.000063
	cm=1.6
	}
		
	forsec mdend {
		insert ichan2
			gnatbar_ichan2=0.008
			gkfbar_ichan2=0.001
			gksbar_ichan2=0.006
		insert nca  // HAV-N- Ca channel
			gncabar_nca=0.001*(1-gabapentin)  // check to modify- original 0.004
		insert lca 
			glcabar_lca=0.0005*(1-gabapentin)
		insert cat
			gcatbar_cat=0.0005*(1-gabapentin)
		insert gskch
			gskbar_gskch=0.0
		insert cagk
			gkbar_cagk=0.0024
		
		gl_ichan2 = 0.000063
		cm=1.6
	}

	forsec ddend {
		insert ichan2
			gnatbar_ichan2=0.0
			gkfbar_ichan2=0.001
			gksbar_ichan2=0.008
		insert nca  // HAV-N- Ca channel
			gncabar_nca=0.001*(1-gabapentin)  // check to modify- original 0.004
		insert lca 
			glcabar_lca=0.0*(1-gabapentin)
		insert cat
			gcatbar_cat=0.001*(1-gabapentin)
		insert gskch
			gskbar_gskch=0.0
		insert cagk
			gkbar_cagk=0.0024
			
		gl_ichan2 = 0.000063
		cm=1.6
	}
	
	connect gcdend1[0](0), soma(1)
	connect gcdend2[0](0), soma(1)
	
	for i=1,3 {
		connect gcdend1[i](0), gcdend1[i-1](1)
	}
	for i=1,3 {
		connect gcdend2[i](0), gcdend2[i-1](1)
	}

	forsec all {
		enat = 45
		ekf = -90
		eks = -90
		ek=-90
		elca=130*(1-gabapentin)
		etca=130*(1-gabapentin)
		esk=-90
		el_ichan2 =-70
		cao_ccanl=2*(1-gabapentin)
	}  // make catau slower70e-3 	cao=2*(1-gabapentin) cai=50.e-6*(1-gabapentin) 
}

proc connect_pre() {  // $o1 target point process, $o2 returned NetCon
	soma $o2 = new NetCon (&v(1), $o1)
			$o2.threshold = 10
}

	proc synapse() {
		for celltype=0, numCellTypes-1 {
			findme=0
			if (strcmp(cellType[celltype].cellType_string,"ppstim")==0) {	// Connect to some pp stim cells
				templist = new List ()
				
				gcdend1[3] syn = new Exp2Sid(0.5) // PP syn based on Greg and Staley
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=0		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				gcdend2[3] syn = new Exp2Sid(0.5) // PPsyn based on Greg and Staley
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=1*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}
			
			if (strcmp(cellType[celltype].cellType_string,"mossycell")==0) {
				templist = new List ()
						
				gcdend1[1] syn = new Exp2Sid(0.5) // MC syn *** Estimated
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=2*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				gcdend2[1] syn = new Exp2Sid(0.5) // MC syn   *** Estimated
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=3*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}

			
			if (strcmp(cellType[celltype].cellType_string,"hippcell")==0) {
				templist = new List ()
						
				gcdend1[3] syn = new Exp2Sid(0.5) // HIPP  syn based on Harney and Jones corrected for temp
				syn.tau1 = 0.5*(1-gabapentin)	syn.tau2 = 6*(1-gabapentin)	syn.e = -70	syn.sid=4*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				gcdend2[3] syn = new Exp2Sid(0.5) // HIPP syn based on Harney and Jones corrected for temp
				syn.tau1 = 0.5*(1-gabapentin)	syn.tau2 = 6*(1-gabapentin)	syn.e = -70	syn.sid=5*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}
			
			if (strcmp(cellType[celltype].cellType_string,"basketcell")==0) {
				templist = new List ()
						
				soma syn = new Exp2Sid(0.5) // BC  syn syn based on Bartos
				syn.tau1 = 0.26*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = -70	syn.sid=6*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}
			
			if (strcmp(cellType[celltype].cellType_string,"granulecell")==0) {	// Sprouted synapses
				templist = new List ()
						
				gcdend1[1] syn = new Exp2Sid(0.5) // Sprouted Syn*************
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=7*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				gcdend2[1] syn = new Exp2Sid(0.5) // Sprouted Syn*********
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=8*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}
			if (findme==0) {
				templist = new List ()
				pre_list.append(templist)		
				findme=1
			}
		}
	}
	
func is_art() { return 0 }

proc position(){xx=$1  yy=$2  zz=$3}

endtemplate granulecell
