	begintemplate mossycell
ndend1=4
ndend2=4
ndend3=4
ndend4=4
gabapentin = 0.5
public  pre_list, connect_pre, subsets, is_art, is_connected
public soma, mcdend1, mcdend2, mcdend3, mcdend4
external noise_random_stream_offset_
create soma, mcdend1[ndend1], mcdend2[ndend2], mcdend3[ndend3], mcdend4[ndend4]
public all, adend, bdend, cdend, ddend
objref syn, pre_list, templist, fl, rs
nst=10
objectvar stim[nst]
public stim
public xx, yy, zz, position
external numCellTypes, cellType


proc init() { // arg is mossy cell # (gid - first mossy cell gid)
	pre_list = new List()
	subsets()
	temp($1)
	synapse()
}

objref all, pdend, ddend

proc subsets() { local i
	objref all, pdend, ddend
	all = new SectionList()
		soma all.append()
		for i=0, 3 mcdend1 [i] all.append()
		for i=0, 3 mcdend2 [i] all.append()
		for i=0, 3 mcdend3 [i] all.append()
		for i=0, 3 mcdend4 [i] all.append()

	pdend  = new SectionList()
		mcdend1 [0] pdend.append()
		mcdend2 [0] pdend.append()
		mcdend3 [0] pdend.append()
		mcdend4 [0] pdend.append()

	ddend  = new SectionList()
		for i=1, 3 mcdend1 [i] ddend.append()
		for i=1, 3 mcdend2 [i] ddend.append()
		for i=1, 3 mcdend3 [i] ddend.append()
		for i=1, 3 mcdend4 [i] ddend.append()
	
}


proc temp() {

	soma {nseg=1 L=20 diam=20} // changed L & diam
		
	mcdend1 [0] {nseg=1 L=50 diam=5.78}
	mcdend1 [1] {nseg=1 L=50 diam=4}
	mcdend1 [2] {nseg=1 L=50 diam=2.5}
 	mcdend1 [3] {nseg=1 L=50 diam=1}

	mcdend2 [0] {nseg=1 L=50 diam=5.78}
	mcdend2 [1] {nseg=1 L=50 diam=4}
	mcdend2 [2] {nseg=1 L=50 diam=2.5}
	mcdend2 [3] {nseg=1 L=50 diam=1}
 		 
	mcdend3 [0] {nseg=1 L=50 diam=5.78}
	mcdend3 [1] {nseg=1 L=50 diam=4}
	mcdend3 [2] {nseg=1 L=50 diam=2.5}
	mcdend3 [3] {nseg=1 L=50 diam=1} 
	
	mcdend4 [0] {nseg=1 L=50 diam=5.78}
	mcdend4 [1] {nseg=1 L=50 diam=4}
	mcdend4 [2] {nseg=1 L=50 diam=2.5}
	mcdend4 [3] {nseg=1 L=50 diam=1} 	

    
	forsec all {
		insert ccanl
	catau_ccanl = 10*(1-gabapentin)
	caiinf_ccanl = 5.e-6*(1-gabapentin)
		insert borgka
	gkabar_borgka=0.00001
		insert nca  // HAV-N- Ca channel
	gncabar_nca=0.00008*(1-gabapentin)  // check to modify- original 0.004
		insert lca 
	glcabar_lca=0.0006*(1-gabapentin)
		insert gskch
	gskbar_gskch=0.016
		insert cagk
	gkbar_cagk=0.0165
		insert hyperde3
	ghyfbar_hyperde3=0.000005
	ghysbar_hyperde3=0.000005
	}

	soma {insert ichan2  //ildikos ichan
	gnatbar_ichan2=0.12  //original 0.030 to .055 
	gkfbar_ichan2=0.0005  //original 0.015
	gl_ichan2 = 0.000011
	cm=0.6} 

	forsec pdend {insert ichan2
	gnatbar_ichan2=0.12  //original 0.015
	gkfbar_ichan2=0.0005
	gl_ichan2 = 0.000044
	cm=2.4}
		
	forsec ddend {insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = 0.000044
	cm=2.4}
		
	connect mcdend1[0](0), soma(1)
	connect mcdend2[0](0), soma(1)
	connect mcdend3[0](0), soma(0)
	connect mcdend4[0](0), soma(0)
	for i=1,3 {connect mcdend1[i](0), mcdend1[i-1](1)}
	for i=1,3 {connect mcdend2[i](0), mcdend2[i-1](1)}
	for i=1,3 {connect mcdend3[i](0), mcdend3[i-1](1)}
	for i=1,3 {connect mcdend4[i](0), mcdend4[i-1](1)}

	forsec all {Ra=100}
	forsec all {enat = 55 ekf = -90  ek=-90  esk=-90 elca=130
		ehyf=-40 ehys=-40
		 el_ichan2 =-59

		cao_ccanl=2*(1-gabapentin) }  // make catau slower70e-3 	cao=2*(1-gabapentin) cai=50.e-6*(1-gabapentin) 

soma stim = new IClamp(0.5)
stim.del = 0.01
stim.dur = 4000
stim.amp = 0.5

objref fl
soma fl = new Gfluct2(0.5) 	// a noise source that emulates fluctuating synaptic conductances
							// the conductances are sampled from a Gaussian distribution
							// where negative values were replaced with 0

rs = new RandomStream($1*noise_random_stream_offset_+10)	// Generate a new random stream, setting
														//	aside 'noise_random_stream_offset_' random numbers
														//	for this cell based on its gid
rs.r.normal(0, 1)			// set the stream to generate a gaussian distribution with mean 0 and variance 1
fl.noiseFromRandom(rs.r)	// use the random Gaussian distribution stream in the Gfluct2 mechanism

// Rob had these various fluctuation properties (avg exh & inh conductance, and st devs)
// commented out to use the defaults set in the mech. Not sure when to use these values

//fl.g_e0 = 0.0242
//fl.g_i0 = 0.1146
//fl.std_e = 0.0375
//fl.std_i = 0.01875

}
	
	proc synapse() {local findme
		for celltype=0, numCellTypes-1 {
			findme=0
			if (strcmp(cellType[celltype].cellType_string,"ppstim")==0) {	// Connect to some pp stim cells
				templist = new List ()
				
				mcdend1 [3] syn = new Exp2Sid(0.7)	//PP(AMPA) syn to dist dend similar to PP to GC
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=0		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend2 [3] syn = new Exp2Sid(0.7)	//PP(AMPA) syn to dist dend similar to PP to GC
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=1*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend3 [3] syn = new Exp2Sid(0.7)	//PP(AMPA) syn to dist dend similar to PP to GC
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=2*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend4 [3] syn = new Exp2Sid(0.7)	//PP(AMPA) syn to dist dend similar to PP to GC
				syn.tau1 = 1.5*(1-gabapentin)	syn.tau2 = 5.5*(1-gabapentin)	syn.e = 0	syn.sid=3*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)
		
				pre_list.append(templist)
				findme=1
			}
			
			if (strcmp(cellType[celltype].cellType_string,"granulecell")==0) {
				templist = new List ()

				mcdend1 [0] syn = new Exp2Sid(0.5)	//GC(AMPA) syn to prox dend similar to GC>CA3 Jonas '93
				syn.tau1 = 0.5*(1-gabapentin)	syn.tau2 = 6.2*(1-gabapentin)	syn.e = 0	syn.sid=4*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend2 [0] syn = new Exp2Sid(0.5)	//GC(AMPA) syn to prox dend similar to GC>CA3 Jonas '93
				syn.tau1 = 0.5*(1-gabapentin)	syn.tau2 = 6.2*(1-gabapentin)	syn.e = 0	syn.sid=5*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend3 [0] syn = new Exp2Sid(0.5)	//GC(AMPA) syn to prox dend similar to GC>CA3 Jonas '93
				syn.tau1 = 0.5*(1-gabapentin)	syn.tau2 = 6.2*(1-gabapentin)	syn.e = 0	syn.sid=6*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend4 [0] syn = new Exp2Sid(0.5)	//GC(AMPA) syn to prox dend similar to GC>CA3 Jonas '93
				syn.tau1 = 0.5*(1-gabapentin)	syn.tau2 = 6.2*(1-gabapentin)	syn.e = 0	syn.sid=7*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}

			if (strcmp(cellType[celltype].cellType_string,"mossycell")==0) {
				templist = new List ()

				mcdend1 [0] syn = new Exp2Sid(0.5)	//MC(AMPA) syn to prox dend similar to CA#>CA3 Aaron
				syn.tau1 = 0.45*(1-gabapentin) 	syn.tau2 =2.2*(1-gabapentin)	syn.e = 0	syn.sid=8*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend2 [0] syn = new Exp2Sid(0.5)	//MC(AMPA) syn to prox dend similar to CA#>CA3 Aaron
				syn.tau1 = 0.45*(1-gabapentin)	syn.tau2 = 2.2*(1-gabapentin)	syn.e = 0	syn.sid=9*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend3 [0] syn = new Exp2Sid(0.5)	//MC(AMPA) syn to prox dend similar to CA#>CA3 Aaron
				syn.tau1 = 0.45*(1-gabapentin)		syn.tau2 = 2.2*(1-gabapentin)	syn.e = 0	syn.sid=10*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend4 [0] syn = new Exp2Sid(0.5)	//MC(AMPA) syn to prox dend similar to CA#>CA3 Aaron
				syn.tau1 = 0.45*(1-gabapentin)		syn.tau2 = 2.2*(1-gabapentin)	syn.e = 0	syn.sid=11*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}

			if (strcmp(cellType[celltype].cellType_string,"basketcell")==0) {
				templist = new List ()

				soma syn = new Exp2Sid(0.5)	//BC(GABA) syn to prox dend based on BC>CA3 Bartos PNAS (mice)
				syn.tau1 = 0.3*(1-gabapentin)	syn.tau2 = 3.3*(1-gabapentin)	syn.e = -70		syn.sid=12*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}

			if (strcmp(cellType[celltype].cellType_string,"hippcell")==0) {
				templist = new List ()

				mcdend1 [2] syn = new Exp2Sid(0.5)	//HIPP(GABA) syn to prox dend based on Hilar>GC Harney&Jones
				syn.tau1 = .5*(1-gabapentin)	syn.tau2 = 6*(1-gabapentin)	syn.e = -70		syn.sid=13*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend2 [2] syn = new Exp2Sid(0.5)	//HIPP(GABA) syn to prox dend based on Hilar>GC Harney&Jones
				syn.tau1 = .5*(1-gabapentin)	syn.tau2 = 6*(1-gabapentin)	syn.e = -70		syn.sid=14*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend3 [2] syn = new Exp2Sid(0.5)	//HIPP(GABA) syn to prox dend based on Hilar>GC Harney&Jones
				syn.tau1 = .5*(1-gabapentin)	syn.tau2 = 6*(1-gabapentin)	syn.e = -70		syn.sid=15*(1-gabapentin)		// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				mcdend4 [2] syn = new Exp2Sid(0.5)	//HIPP(GABA) syn to prox dend based on Hilar>GC Harney&Jones
				syn.tau1 = .5*(1-gabapentin)	syn.tau2 = 6*(1-gabapentin)	syn.e =-70		syn.sid=16	*(1-gabapentin)	// sid: Set the synapse id for each synapse defined for cell
				templist.append(syn)

				pre_list.append(templist)
				findme=1
			}
			if (findme==0) {
				templist = new List ()
				pre_list.append(templist)		
				findme=1
			}
		}
	}

	proc connect_pre() {  // $o1 target point process, $o2 returned NetCon
	soma $o2 = new NetCon (&v(1), $o1)
			$o2.threshold = 10
	}

	func is_art()  { return 0 }

	proc position(){xx=$1  yy=$2  zz=$3}

	endtemplate mossycell
